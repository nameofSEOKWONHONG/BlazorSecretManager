@using System.Security.Claims
@using BlazorSecretManager.Components.Dialogs
@using BlazorSecretManager.Hubs
@using BlazorSecretManager.Hubs.Dtos
@using BlazorSecretManager.Infrastructure
@using BlazorTrivialJs
@using eXtensionSharp
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@using Microsoft.AspNetCore.SignalR.Client
@using MudBlazor.Extensions.Core
@using MudBlazor.Extensions.Helper
@using MudBlazor.Extensions.Options
@using MudBlazor.Utilities
@using BlazorSecretManager.Components.Custom
@using BlazorSecretManager.Entities
@using BlazorSecretManager.Services.Messages
@implements IAsyncDisposable
@inherits LayoutComponentBase

@* Required *@
<MudThemeProvider/>
<MudPopoverProvider />

@* Needed for dialogs *@
<MudDialogProvider />

@* Needed for snackbars *@
<MudSnackbarProvider />

<CascadingValue Value="State" IsFixed="true">
    <AuthorizeView>
        <Authorized>
            <MudLayout>
                <MudAppBar Elevation="0" Dense="false" Style="background: #d6e9fc;">
                    <MudIconButton Icon="@Icons.Material.Filled.Menu" Edge="Edge.Start" OnClick="DrawerToggle"/>
                    <MudText Style="font-weight: bold;" Color="Color.Dark">Blazor Secret Manager</MudText>
                    <MudSpacer/>
                    <div class="d-flex">
                        <MudTextField T="string" Variant="Variant.Outlined" Placeholder="Search menus"
                                      Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" AdornmentColor="Color.Error"
                                      ValueChanged="MenuSearchValueChange"
                                      Style="width: 800px;"
                                      @ref="_searchTextField"/>
                        <MudPopover Open="@__open" AnchorOrigin="Origin.BottomCenter" TransformOrigin="Origin.TopCenter" RelativeWidth="DropdownWidth.Relative" >
                            <div class="d-flex flex-column pa-1">
                                @foreach (var item in _content)
                                {
                                    <MudButton OnClick="@(() => Navigate(item.RouteUrl))">@item.Title</MudButton>
                                }
                            </div>
                        </MudPopover>
                    </div>
                    <MudSpacer/>
                    <MudBadge Color="Color.Secondary" Dot="true" Overlap="true" Visible="_noticeVisible">
                        <MudMenu Icon="@Icons.Material.Outlined.Notifications" Variant="Variant.Outlined" AnchorOrigin="Origin.BottomLeft" TransformOrigin="Origin.TopCenter" PopoverClass="docs-layout-menu-shadow" ListClass="pa-2 docs-menu-list" LockScroll="true" Dense="true">
                            <div class="d-flex justify-space-between align-center px-2">
                                <MudText Typo="Typo.subtitle2">Notifications</MudText>
                                <MudButton Disabled="false" StartIcon="@Icons.Material.Filled.DoneAll" Variant="Variant.Text" Color="Color.Primary" Class="ml-16 mr-n2">Mark as read</MudButton>
                            </div>
                            @if (_noticeMessages.xIsNotEmpty())
                            {
                                @foreach (var item in _noticeMessages.Take(5))
                                {
                                    <MudBadge Color="Color.Secondary" Dot="true" Overlap="true" Visible="!item.IsRead" Style="display: inline;">
                                        <MudMenuItem OnClick="@(() => NotificationClick(item))">
                                            <MudText Typo="Typo.subtitle2">@item.Title</MudText>
                                            <MudText Typo="Typo.body2">@($"{item.Content} • {item.PublishDate.ToShortDateString()}")</MudText>
                                        </MudMenuItem>                                        
                                    </MudBadge>
                                    <MudDivider/>
                                }
                            }
                            else
                            {
                                <div class="d-flex justify-center align-center px-2 py-8 relative">
                                    <MudText Class="mud-text-secondary my-12">Nothing new :(</MudText>
                                    <MudBlazorLogo Class="docs-logo-filter mx-16 absolute"/>
                                </div>
                            }
                        </MudMenu>
                    </MudBadge>
                    <MudBadge Color="Color.Secondary" Dot="true" Overlap="true" Visible="_chatVisible">
                        <MudButton StartIcon="@Icons.Material.Outlined.Chat" OnClick="ToggleChat" Variant="Variant.Outlined">CHAT V1</MudButton>
                        <MudButton StartIcon="@Icons.Material.Outlined.Chat" OnClick="TestModaless" Variant="Variant.Outlined">CHAT V2</MudButton>
                    </MudBadge>
                    <MudMenu StartIcon="@Icons.Material.Filled.Language" Variant="Variant.Outlined" Style="margin: 10px;" Label="@AppState.SupportedLanguage[State.CurrentCulture]">
                        @foreach (var item in AppState.SupportedCultures)
                        {
                            <MudMenuItem OnClick="@(() => ChangeCulture(item.Value.Name))">@item.Key</MudMenuItem>
                        }
                    </MudMenu>
                    <MudButton Variant="Variant.Outlined" Style="margin: 10px;" OnClick="SettingClick">Settings</MudButton>
                    <MudButton Variant="Variant.Outlined" Style="margin: 10px;" Href="/logout">Logout</MudButton>
                </MudAppBar>
                <MudDrawer @bind-Open="_drawerOpen" ClipMode="DrawerClipMode.Always" Elevation="2">
                    <NavMenu/>
                </MudDrawer>
                <MudMainContent>
                    <MudContainer MaxWidth="MaxWidth.ExtraLarge" Style="padding: 10px;">
                        @Body
                    </MudContainer>
                </MudMainContent>
                <MudScrollToTop TopOffset="400" Style="z-index:2000;">
                    <MudFab StartIcon="@Icons.Material.Filled.KeyboardArrowUp" Color="Color.Primary" />
                </MudScrollToTop>

                <MudDrawer @bind-Open="@_open" Width="@_width" Height="@_height" Anchor="@_anchor" Elevation="1" Variant="@DrawerVariant.Temporary">
                    <MudDrawerHeader>
                        <MudText Typo="Typo.h6">설정</MudText>
                    </MudDrawerHeader>
                    <MudStack Row="false">
                        <MudPaper Elevation="1" Style="margin: 20px; padding: 20px;">
                            <MudText Typo="Typo.caption">USER INFORMATION</MudText>
                            <br/>
                            <br/>
                            <MudStack Class="d-flex justify-end flex-grow-1 gap-4" Row="true">
                                <MudTextField T="string" Label="EMAIL" @bind-Value="_userSession.Email" ReadOnly="true"/>
                                <MudTextField T="string" Label="NAME" @bind-Value="_userSession.Name" ReadOnly="true"/>
                                <MudTextField T="string" Label="ROLE" @bind-Value="_userSession.Role" ReadOnly="true"/>
                                <MudTooltip Text="User Key">
                                    <MudIconButton Icon="@Icons.Material.Filled.ContentCopy" Color="Color.Info" Variant="Variant.Filled" OnClick="GetUserKey"/>
                                </MudTooltip>
                            </MudStack>
                        </MudPaper>
                    </MudStack>
                </MudDrawer>


                <div id="popup" class="popup" style=@_modalessCss>
                    <div id="popup-header" class="popup-header">
                        <span>CHAT</span>
                        <span class="close" @onclick="ClosePopup">&times;</span>
                    </div>
                    <div class="popup-content">
                        <ChatComponent UserSession="_userSession"/>
                    </div>
                    <div id="popup-resizer" class="resizer"></div>
                </div>                
            </MudLayout>
        </Authorized>
        <NotAuthorized>
            @Body
        </NotAuthorized>
    </AuthorizeView>
</CascadingValue>

@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthStateProvider
@inject ProtectedSessionStorage ProtectedSessionStorage
@inject IJSRuntime JSRuntime
@inject ISnackbar Snackbar
@inject AppState State
@inject ITrivialJs TrivialJs
@inject INotificationService NotificationService;
@inject IDialogService DialogService;
@code {
    private CancellationTokenSource _cts = new();

    private bool _drawerOpen = true;
    
    private bool _open;
    private Anchor _anchor;
    private string _width, _height;

    List<MenuRoute> _menuRoutes = new()
    {
        // new MenuRoute()
        // {
        //     Keywords = ["CRM", "사용자", "사이트", "관리자", "user", "site", "administrator"],
        //     RouteModels = [
        //         new RouteModel(){Title = "CRM 사용자", RouteUrl = "/userlist"},
        //         new RouteModel(){Title = "웰니스 사용자", RouteUrl = "/wellnessuserlist"},
        //     ]
        // },
        // new MenuRoute()
        // {
        //     Keywords = ["센서", ],
        //     RouteModels = [
        //         new RouteModel(){Title = "센서", RouteUrl = "/sensorlist"},
        //     ]
        // },
        // new MenuRoute()
        // {
        //     Keywords = ["메타데이터"],
        //     RouteModels = [
        //         new RouteModel(){Title = "메타데이터", RouteUrl = "/metadatalist"},
        //     ]
        // }
    };
    MudTextField<string> _searchTextField;
    UserSession _userSession = new();
    bool _popoverOpen;

    protected override void OnInitialized()
    {
    }

    
    private HubConnection _noticeHubConnection;
    protected override async Task OnInitializedAsync()
    {
        string baseUrl = NavigationManager.BaseUri;
        
        var noticeHubUrl = baseUrl.TrimEnd('/') + NoticeHub.HubUrl;

        _noticeHubConnection = new HubConnectionBuilder()
            .WithUrl(noticeHubUrl)
            .WithAutomaticReconnect()
            .Build();
        _noticeHubConnection.Reconnected += HubConnectionOnReconnected;
        _noticeHubConnection.Reconnecting += HubConnectionOnReconnecting;        
        _noticeHubConnection.On<string, string, string>("ReceiveNotification", ReceiveNotification);
        await _noticeHubConnection.StartAsync();
    }
    
    Task HubConnectionOnReconnecting(Exception arg)
    {
        Console.WriteLine("HubConnectionOnReconnecting");
        Console.WriteLine(arg.Message);
        return Task.CompletedTask;
    }    

    Task HubConnectionOnReconnected(string arg)
    {
        Console.WriteLine("HubConnectionOnReconnected");
        Console.WriteLine(arg);
        return Task.CompletedTask;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var state = await AuthStateProvider.GetAuthenticationStateAsync();
            var user = state.User;
            if(!user.Identity.IsAuthenticated)
            {
                NavigationManager.NavigateTo($"/signin");
                return;
            }

            var userId = state.User.Claims.First(m => m.Type == ClaimTypes.NameIdentifier).Value;
            var email = state.User.Claims.First(m => m.Type == ClaimTypes.Email).Value;
            var name = state.User.Claims.First(m => m.Type == ClaimTypes.Name).Value;
            var key = state.User.Claims.First(m => m.Type == ClaimTypes.PrimarySid).Value;
            var phone = state.User.Claims.First(m => m.Type == ClaimTypes.MobilePhone).Value;
            var role = state.User.Claims.First(m => m.Type == ClaimTypes.Role).Value;

            _userSession = new UserSession()
            {
                UserId = userId,
                Email = email,
                Name = name,
                Role = role,
                UserKey = key,
                Phone = phone,
            };

            var currentCulture = await ProtectedSessionStorage.GetAsync<string>("CurrentCulture");
            if (currentCulture.Success.xIsFalse())
            {
                var browserInfo = await TrivialJs.GetBrowserInfo();
                State.CurrentCulture = browserInfo["language"];
            }
            
            _primaryColor = await Color.Primary.ToMudColorAsync(JSRuntime);
            
            await JSRuntime.InvokeVoidAsync("initializeDraggablePopup", "popup");
            await JSRuntime.InvokeVoidAsync("initializeResizablePopup", "popup");

            _noticeMessages = await NotificationService.GetNotifications(userId);
            _noticeVisible = _noticeMessages.Count > 0;
            await InvokeAsync(StateHasChanged);
        }
    }
    
    private async Task StartDrag(MouseEventArgs e)
    {
        await JSRuntime.InvokeVoidAsync("startDrag", "popup");
    }

    private bool _chatVisible = false;
    private bool _chatOpen = false;

    private MudColor _primaryColor;
    public DialogOptionsEx Options { get; set; } = new DialogOptionsEx
    {
        MaximizeButton = true,
        CloseButton = true,
        FullHeight = false,
        MaxWidth = MaxWidth.Medium,
        FullWidth = true,
        DragMode = MudDialogDragMode.Simple,
        Animations = new[] { AnimationType.Pulse },
        Position = DialogPosition.BottomRight,
        BackdropClick = false,
        Modal = true,
    };
    private string _code;
    async Task ToggleChat()
    {
        var options = Options.CloneOptions();
        _code = MudExCodeView.ExecuteAndReturnFuncAsString(() =>
        {
            options.DialogAppearance = MudExAppearance.FromCss(MudExCss.Classes.Dialog.ColorfullGlass)
                .WithStyle(b => b
                    .WithSize(50, CssUnit.Percentage)
                    .WithMaxSize(90, 60, CssUnit.Percentage)
                    .WithBoxShadow($" 0 8px 32px 0 {_primaryColor.SetAlpha(0.4).ToString(MudColorOutputFormats.RGBA)}")
                    .WithBackgroundColor(_primaryColor.SetAlpha(0.2))
                );
            options.DialogBackgroundAppearance = MudExAppearance.FromCss(MudExCss.Classes.Backgrounds.MovingDots)
                .WithStyle(new
                {
                    Border = "4px solid",
                    BorderColor = Color.Secondary,
                    BorderRadius = 8
                });
        });     
         _ = await DialogService.ShowEx<ChatDialog>("Chat Dialog", dialog => { dialog.UserSession = _userSession; }, Options);
        
        // IMudExDialogReference<ChatDialog>? dlgReference = await DialogService.ShowEx<ChatDialog>("Chat Dialog", dialog =>
        // {
        //     dialog.UserSession = _userSession;
        // }, options);

        // _ = await DialogService.ShowAsync<ChatDialog>("CHAT", new DialogParameters()
        // {
        //     {"UserSession", _userSession },
        // }, new DialogOptions()
        // {
        //     FullWidth = true,
        //     MaxWidth = MaxWidth.Medium,
        // });
    }

    private string _modalessCss = "display: none;";
    void TestModaless()
    {
        _modalessCss = "display: block;";
    }

    void ClosePopup()
    {
        _modalessCss = "display: none;";
    }

    List<Notification> _noticeMessages = new();
    async Task ReceiveNotification(string userId, string type, string message)
    {
        var notice = message.xDeserialize<Notification>();
        if (userId.xIsNotEmpty())
        {
            if (userId == _userSession.UserId)
            {
                _noticeMessages.Add(notice);
                _noticeVisible = true;
            }
        }
        else
        {
            _noticeMessages.Add(notice);
            _noticeVisible = true;
        }
        await InvokeAsync(StateHasChanged);
    }
    
    private bool _noticeVisible = false;
    async Task NotificationClick(Notification item)
    {
        item.IsRead = true;
        await _noticeHubConnection.SendAsync("ConfirmNotification", item.Id);
        _noticeVisible = this._noticeMessages.Any(m => m.IsRead == false);
    }
    
    void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
    }
    
    private void SettingClick()
    {
        _open = true;
        _anchor = Anchor.End;

        switch (_anchor)
        {
            case Anchor.Start:
                _width = "300px";
                _height = "100%";
                break;
            case Anchor.End:
                _width = "40%";
                _height = "100%";
                break;
            case Anchor.Bottom:
                _width = "100%";
                _height = "200px";
                break;
            case Anchor.Top:
                _width = "100%";
                _height = "350px";
                break;
        }
    }

    void MenuSearchValueChange(string obj)
    {
        if (obj.xIsEmpty())
        {
            __open = false;
            return;
        }
        
        if (obj.Length >= 2)
        {
            if (!__open)
                __open = true;

            _content.Clear();
            var state = _menuRoutes.Where(m => m.Keywords.Any(x => x.Contains(obj))).ToList();
            foreach (var route in state)
            {
                _content.AddRange(route.RouteModels);
            }
        }
        else
        {
            if (__open)
                __open = false;            
        }
    }
    
    private List<RouteModel> _content = new();
    
    public bool __open;

    
    class MenuRoute
    {
        public string[] Keywords { get; set; }
        public List<RouteModel> RouteModels { get; set; }
    }

    class RouteModel
    {
        public string Title { get; set; }
        public string RouteUrl { get; set; }
    }
    
    private void Navigate(string url)
    {
        NavigationManager.NavigateTo(url);
        _searchTextField.Clear();
        __open = false;
    }

    private async Task GetUserKey(MouseEventArgs obj)
    {
        await JSRuntime.InvokeVoidAsync("copyToClipboard", this._userSession.UserKey);
        this.Snackbar.Add("copied", Severity.Success);
    }

    private async Task ChangeCulture(string obj)
    {
        State.CurrentCulture = obj;
        _popoverOpen = !_popoverOpen;
        await ProtectedSessionStorage.SetAsync("CurrentCulture", State.CurrentCulture);
        StateHasChanged();
    }

    private void PopoverOpen()
    {
        _popoverOpen = !_popoverOpen;
    }


    public async ValueTask DisposeAsync()
    {
        if (_cts != null) await CastAndDispose(_cts);
        if (_searchTextField != null) await _searchTextField.DisposeAsync();
        if (_noticeHubConnection != null)
        {
            _noticeHubConnection.Reconnected -= HubConnectionOnReconnected;
            _noticeHubConnection.Reconnecting -= HubConnectionOnReconnecting;
            await _noticeHubConnection.DisposeAsync();
        }
        if (Snackbar != null) await CastAndDispose(Snackbar);

        return;

        static async ValueTask CastAndDispose(IDisposable resource)
        {
            if (resource is IAsyncDisposable resourceAsyncDisposable)
                await resourceAsyncDisposable.DisposeAsync();
            else
                resource.Dispose();
        }
    }

}