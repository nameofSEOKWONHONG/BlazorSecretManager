@using System.Security.Claims
@using BlazorSecretManager.Infrastructure
@using eXtensionSharp
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@using MudComposite.Base
@inherits LayoutComponentBase

@* Required *@
<MudThemeProvider/>
<MudPopoverProvider />

@* Needed for dialogs *@
<MudDialogProvider />

@* Needed for snackbars *@
<MudSnackbarProvider />

<CascadingValue Value="State" IsFixed="true">
    <AuthorizeView>
        <Authorized>
            <MudLayout>
                <MudAppBar Elevation="0" Dense="false" Style="background: #d6e9fc;">
                    <MudIconButton Icon="@Icons.Material.Filled.Menu" Edge="Edge.Start" OnClick="DrawerToggle"/>
                    <MudText Style="font-weight: bold;" Color="Color.Dark">Blazor Secret Manager</MudText>
                    <MudSpacer/>
                    <div class="d-flex">
                        <MudTextField T="string" Variant="Variant.Outlined" Placeholder="Search menus"
                                      Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" AdornmentColor="Color.Error"
                                      ValueChanged="MenuSearchValueChange"
                                      Style="width: 800px;"
                                      @ref="_searchTextField"/>
                        <MudPopover Open="@__open" AnchorOrigin="Origin.BottomCenter" TransformOrigin="Origin.TopCenter" RelativeWidth="DropdownWidth.Relative" >
                            <div class="d-flex flex-column pa-1">
                                @foreach (var item in _content)
                                {
                                    <MudButton OnClick="@(() => Navigate(item.RouteUrl))">@item.Title</MudButton>
                                }
                            </div>
                        </MudPopover>
                    </div>
                    <MudSpacer/>
                    <MudMenu StartIcon="@Icons.Material.Filled.Language" Variant="Variant.Outlined" Style="margin: 10px;" Label="@AppState.SupportedLanguage[State.CurrentCulture]">
                        @foreach (var item in AppState.SupportedCultures)
                        {
                            <MudMenuItem OnClick="@(() => ChangeCulture(item.Value.Name))">@item.Key</MudMenuItem>
                        }
                    </MudMenu>
                    <MudButton Variant="Variant.Outlined" Style="margin: 10px;" OnClick="SettingClick">Settings</MudButton>
                    <MudButton Variant="Variant.Outlined" Style="margin: 10px;" Href="/logout">Logout</MudButton>
                </MudAppBar>
                <MudDrawer @bind-Open="_drawerOpen" ClipMode="DrawerClipMode.Always" Elevation="2">
                    <NavMenu/>
                </MudDrawer>
                <MudMainContent>
                    <MudContainer MaxWidth="MaxWidth.ExtraLarge" Style="padding: 10px;">
                        @Body
                    </MudContainer>
                </MudMainContent>
                <MudScrollToTop TopOffset="400" Style="z-index:2000;">
                    <MudFab StartIcon="@Icons.Material.Filled.KeyboardArrowUp" Color="Color.Primary" />
                </MudScrollToTop>

                <MudDrawer @bind-Open="@_open" Width="@_width" Height="@_height" Anchor="@_anchor" Elevation="1" Variant="@DrawerVariant.Temporary">
                    <MudDrawerHeader>
                        <MudText Typo="Typo.h6">설정</MudText>
                    </MudDrawerHeader>
                    <MudStack Row="false">
                        <MudPaper Elevation="1" Style="margin: 20px; padding: 20px;">
                            <MudText Typo="Typo.caption">사용자 정보</MudText>
                            <br/>
                            <br/>
                            <MudStack Class="d-flex justify-end flex-grow-1 gap-4" Row="true">
                                <MudTextField T="string" Label="이메일" @bind-Value="_userSession.Email" ReadOnly="true"/>
                                <MudTextField T="string" Label="이름" @bind-Value="_userSession.Name" ReadOnly="true"/>
                                <MudTextField T="string" Label="역활" @bind-Value="_userSession.Role" ReadOnly="true"/>
                                <MudTooltip Text="User Key">
                                    <MudIconButton Icon="@Icons.Material.Filled.ContentCopy" Color="Color.Info" Variant="Variant.Filled" OnClick="GetUserKey"/>
                                </MudTooltip>
                            </MudStack>
                        </MudPaper>
                    </MudStack>
                </MudDrawer>
            </MudLayout>
        </Authorized>
        <NotAuthorized>
            @Body
        </NotAuthorized>
    </AuthorizeView>
</CascadingValue>

@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthStateProvider
@inject ProtectedSessionStorage ProtectedSessionStorage
@inject IJSRuntime JSRuntime
@inject ISnackbar Snackbar
@inject AppState State
@code {

    private bool _drawerOpen = true;
    
    private bool _open;
    private Anchor _anchor;
    private string _width, _height;

    List<MenuRoute> _menuRoutes = new()
    {
        // new MenuRoute()
        // {
        //     Keywords = ["CRM", "사용자", "사이트", "관리자", "user", "site", "administrator"],
        //     RouteModels = [
        //         new RouteModel(){Title = "CRM 사용자", RouteUrl = "/userlist"},
        //         new RouteModel(){Title = "웰니스 사용자", RouteUrl = "/wellnessuserlist"},
        //     ]
        // },
        // new MenuRoute()
        // {
        //     Keywords = ["센서", ],
        //     RouteModels = [
        //         new RouteModel(){Title = "센서", RouteUrl = "/sensorlist"},
        //     ]
        // },
        // new MenuRoute()
        // {
        //     Keywords = ["메타데이터"],
        //     RouteModels = [
        //         new RouteModel(){Title = "메타데이터", RouteUrl = "/metadatalist"},
        //     ]
        // }
    };
    MudTextField<string> _searchTextField;
    UserSession _userSession = new();
    bool _popoverOpen;

    protected override async Task OnInitializedAsync()
    {

    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var state = await AuthStateProvider.GetAuthenticationStateAsync();
            var user = state.User;
            if(!user.Identity.IsAuthenticated)
            {
                NavigationManager.NavigateTo($"/signin");
                return;
            }

            var userId = state.User.Claims.First(m => m.Type == ClaimTypes.NameIdentifier).Value;
            var email = state.User.Claims.First(m => m.Type == ClaimTypes.Email).Value;
            var name = state.User.Claims.First(m => m.Type == ClaimTypes.Name).Value;
            var key = state.User.Claims.First(m => m.Type == ClaimTypes.PrimarySid).Value;
            var phone = state.User.Claims.First(m => m.Type == ClaimTypes.MobilePhone).Value;
            var role = state.User.Claims.First(m => m.Type == ClaimTypes.Role).Value;

            _userSession = new UserSession()
            {
                UserId = userId,
                Email = email,
                Name = name,
                Role = role,
                UserKey = key,
                Phone = phone,
            };

            var currentCulture = await ProtectedSessionStorage.GetAsync<string>("CurrentCulture");
            if (currentCulture.Success.xIsFalse())
            {
                var browserInfo = await this.JSRuntime.InvokeAsync<Dictionary<string, string>>("getBrowserInfo");
                State.CurrentCulture = browserInfo["language"];
            }   
        }
    }
    
    void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
    }

    void OpenDrawer(Anchor anchor)
    {
        _open = true;
        _anchor = anchor;

        switch (anchor)
        {
            case Anchor.Start:
                _width = "300px";
                _height = "100%";
                break;
            case Anchor.End:
                _width = "40%";
                _height = "100%";
                break;
            case Anchor.Bottom:
                _width = "100%";
                _height = "200px";
                break;
            case Anchor.Top:
                _width = "100%";
                _height = "350px";
                break;
        }
    }
    
    private void SettingClick()
    {
        OpenDrawer(Anchor.End);
    }
    
    void MenuSearchValueChange(string obj)
    {
        if (obj.xIsEmpty())
        {
            __open = false;
            return;
        }
        
        if (obj.Length >= 2)
        {
            if (!__open)
                __open = true;

            _content.Clear();
            var state = _menuRoutes.Where(m => m.Keywords.Any(x => x.Contains(obj))).ToList();
            foreach (var route in state)
            {
                _content.AddRange(route.RouteModels);
            }
        }
        else
        {
            if (__open)
                __open = false;            
        }
    }
    
    private List<RouteModel> _content = new();
    
    public bool __open;

    
    class MenuRoute
    {
        public string[] Keywords { get; set; }
        public List<RouteModel> RouteModels { get; set; }
    }

    class RouteModel
    {
        public string Title { get; set; }
        public string RouteUrl { get; set; }
    }
    
    private void Navigate(string url)
    {
        NavigationManager.NavigateTo(url);
        _searchTextField.Clear();
        __open = false;
    }

    private async Task GetUserKey(MouseEventArgs obj)
    {
        await JSRuntime.InvokeVoidAsync("copyToClipboard", this._userSession.UserKey);
        this.Snackbar.Add("copied", Severity.Success);
    }

    private async Task ChangeCulture(string obj)
    {
        State.CurrentCulture = obj;
        _popoverOpen = !_popoverOpen;
        await ProtectedSessionStorage.SetAsync("CurrentCulture", State.CurrentCulture);
        StateHasChanged();
    }

    private void PopoverOpen()
    {
        _popoverOpen = !_popoverOpen;
    }
}