@page "/secrets"
@using BlazorSecretManager.Components.Dialogs
@using BlazorSecretManager.Composites
@using BlazorSecretManager.Entities
@using BlazorSecretManager.Services.Secrets.Abstracts
@using eXtensionSharp

@inherits MudComposite.ViewComponents.MudListViewComponent<Secret, SecretSearchModel, ISecretComposite>

<PageTitle>Secrets</PageTitle>

<MudContainer MaxWidth="MaxWidth.ExtraLarge">
    <MudPaper Elevation="0" Style="padding: 10px;" >
        <MudStack Class="d-flex justify-end flex-grow-1 gap-4" Row="true" @onkeypress="this.Composite.SearchKeyUp">
            <MudTextField T="string" Label="Title" @bind-Value="this.Composite.SearchModel.Title" Clearable="true"/>
            <MudTextField T="string" Label="Description" @bind-Value="this.Composite.SearchModel.Description" Clearable="true"/>
        </MudStack>
        <br/>
        <MudPaper Class="d-flex justify-end flex-grow-1 gap-4" Elevation="0">
            <MudButton StartIcon="@Icons.Material.Filled.Search" Variant="Variant.Filled" Size="Size.Small" Color="Color.Info" OnClick="this.Composite.ReloadServerData">Search</MudButton>
            <MudButton StartIcon="@Icons.Material.Filled.Create" Variant="Variant.Filled" Size="Size.Small" Color="Color.Info" OnClick="@(() => AddOrUpdate(new Secret()))">New</MudButton>
        </MudPaper>
    </MudPaper>

    <br/>
    
    <MudDataGrid T="Secret"
                 ServerData="this.Composite.ServerReload"
                 Dense="true"
                 Filterable="false"
                 SortMode="SortMode.None"
                 Height="960px"
                 RowStyleFunc="this.Composite.RowStyleFunc"
                 RowClick="this.Composite.DataGridRowClick"
                 @ref="_dataGrid">
        <Columns>
            <PropertyColumn Property="m => m.Id"/>
            <PropertyColumn Property="m => m.Title"/>
            <PropertyColumn Property="m => m.Description"/>
            <PropertyColumn Property="m => m.CreatedAt"/>
            <PropertyColumn Property="m => m.UpdatedAt"/>
            <TemplateColumn>
                <CellTemplate>
                    <MudStack Row="true">
                        <MudTooltip Text="add or update" Placement="Placement.Top">
                            <MudIconButton Icon="@Icons.Material.Filled.Update" Color="Color.Info" Variant="Variant.Filled" OnClick="() => AddOrUpdate(context.Item)"/>    
                        </MudTooltip>
                        <MudTooltip Text="copy secret api url" Placement="Placement.Top">
                            <MudIconButton Icon="@Icons.Material.Filled.ContentCopy" Color="Color.Info" Variant="Variant.Filled" OnClick="() => GetSecretUrl(context.Item.Id)"/>    
                        </MudTooltip>
                        <MudTooltip Text="remove" Placement="Placement.Top">
                            <MudIconButton Icon="@Icons.Material.Filled.Delete" Color="Color.Error" Variant="Variant.Filled" OnClick="() => this.Composite.Remove(context.Item)"/>    
                        </MudTooltip>
                    </MudStack>
                </CellTemplate>
            </TemplateColumn>
        </Columns>
        <PagerContent>
            <MudDataGridPager T="Secret" pa />
        </PagerContent>        
    </MudDataGrid>
</MudContainer>

@inject ISecretService SecretService
@inject IDialogService DialogService
@inject IJSRuntime JSRuntime
@inject ISnackbar Snackbar
@code {
    Secret _selectedItem;
    MudDataGrid<Secret> _dataGrid;

    protected override void OnViewAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            this.Composite.SetUp(this._dataGrid);
            this.Composite.Initialize();
        }
    }

    private async Task AddOrUpdate(Secret item)
    {
        var parameters = new DialogParameters()
        {
            { "Secret", item }
        };
        var options = new DialogOptions()
        {
            FullWidth = true,
            MaxWidth = MaxWidth.Medium
        };
        var title = string.Empty;
        if (item.Id > 0) title = "Modify";
        else title = "Create";
        var dlg = await this.DialogService.ShowAsync<SecretDialog>(title, parameters, options);
        var result = await dlg.Result;
        if (!result.Canceled)
        {
            var data = result.Data.xAs<Secret>();
            if (data.xIsNotEmpty())
            {
                if (data.Id > 0)
                {
                    await this.SecretService.UpdateSecret(data);
                }
                else
                {
                    await this.SecretService.CreateSecret(data);    
                }
                await this._dataGrid.ReloadServerData();
            }
        }
    }

    async Task GetSecretUrl(int id)
    {
        var url = await this.SecretService.GetSecretUrl(id);
        await JSRuntime.InvokeVoidAsync("copyToClipboard", url);
        Snackbar.Add("The URL has been copied", Severity.Success);
    }

    async Task DeleteSecret(int id)
    {
        await this.SecretService.DeleteSecret(id);
        await this._dataGrid.ReloadServerData();
    }
}