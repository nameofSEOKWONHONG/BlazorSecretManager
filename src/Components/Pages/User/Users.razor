@page "/users"
@rendermode InteractiveAuto

@using BlazorSecretManager.Components.Pages.User.ViewModels
@using BlazorSecretManager.Entities
@using BlazorSecretManager.Services.Auth
@using Microsoft.AspNetCore.Components.Rendering

@inherits MudMvvMKit.ViewComponents.MudListViewComponent<User, UserSearchModel, IUserListViewModel>

<PageTitle>Users</PageTitle>

<MudContainer MaxWidth="MaxWidth.ExtraLarge">
    <MudPaper Elevation="0" Style="padding: 10px;">
        <MudStack Class="d-flex justify-end flex-grow-1 gap-4" Row="true" @onkeypress="SearchKeyUp">
            <MudTextField T="string" Label="@nameof(UserSearchModel.Email)" @bind-Value="this.ViewModel.SearchModel.Email" Clearable="true"/>
            <MudTextField T="string" Label="@nameof(UserSearchModel.Name)" @bind-Value="this.ViewModel.SearchModel.Name" Clearable="true"/>
        </MudStack>
        <br/>
        <MudPaper Class="d-flex justify-end flex-grow-1 gap-4" Elevation="0">
            <MudButton StartIcon="@Icons.Material.Filled.Search" Variant="Variant.Filled" Size="Size.Small" Color="Color.Info" OnClick="ReloadServerData">Search</MudButton>
        </MudPaper>
    </MudPaper>
    
    <br/>
    @* <div class="d-flex"> *@
    @*     @DynamicForm *@
    @* </div> *@
    @* <br/> *@
    @* <div class="d-flex"> *@
    @*     <input type="text" @bind-value="@this.ViewModel.SearchModel.Email"/> *@
    @*     <input type="text" @bind-value="@this.ViewModel.SearchModel.Name"/>         *@
    @* </div> *@
    @* <br/> *@

    <MudDataGrid T="User"
                 ServerData="ServerReload"
                 Dense="true"
                 Filterable="false"
                 SortMode="SortMode.None"
                 Height="960px"
                 RowStyleFunc="RowStyleFunc"
                 RowClick="DataGridRowClick"
                 @ref="this.ViewModel.DataGrid">
        <ColGroup>
            <col style="width: 10%"/>
            <col style="width: 20%"/>
            <col style="width: 10%"/>
            @* <col style="width: 20%"/> *@
            <col style="width: 10%"/>
            <col style="width: 10%"/>
        </ColGroup>
        <Columns>
            <PropertyColumn Property="m => m.Email"/>
            <PropertyColumn Property="m => m.UserName"/>
            <PropertyColumn Property="m => m.RoleName"/>
            <PropertyColumn Property="m => m.LockoutEnabled"/>
            <TemplateColumn>
                <CellTemplate>
                    <MudStack Row="true">
                        @if (this.ViewModel.UserSession.Role.ToUpper() == "ADMIN")
                        {
                            @if (context.Item.LockoutEnabled)
                            {
                                <MudIconButton Icon="@Icons.Material.Filled.LockOpen" Color="Color.Info" Variant="Variant.Filled" OnClick="@(() => this.Click("lock", context.Item))"/>
                            }
                            else
                            {
                                <MudIconButton Icon="@Icons.Material.Filled.Lock" Color="Color.Error" Variant="Variant.Filled" OnClick="@(() => this.Click("lock", context.Item))"/>
                            }
                            <MudIconButton Icon="@Icons.Material.Filled.Delete" Color="Color.Error" Variant="Variant.Filled" OnClick="@(() => this.Click("copyApiKey", context.Item))"/>
                            <MudIconButton Icon="@Icons.Material.Filled.Delete" Color="Color.Error" Variant="Variant.Filled" OnClick="() => this.Remove(context.Item)"/>
                        }
                    </MudStack>
                </CellTemplate>
            </TemplateColumn>
        </Columns>
        <PagerContent>
            <MudDataGridPager T="User" pa/>
        </PagerContent>
    </MudDataGrid>
</MudContainer>

@code {
    // private RenderFragment DynamicForm;
    MudDataGrid<User> _dataGrid;
    protected override void OnViewInitialized()
    {
        
    }

    // protected override void OnViewAfterRender(bool firstRender)
    // {
    //     if (firstRender)
    //     {
    //         this.ViewModel.Initialize(this._dataGrid);
    //         // DynamicForm = builder =>
    //         // {
    //         //     builder.OpenElement(0, "div");
    //         //     builder.AddAttribute(1, "style", "padding: 10px; border: 1px solid #ccc;");
    //         //
    //         //     builder.OpenElement(2, "label");
    //         //     builder.AddContent(3, "Email: ");
    //         //     builder.CloseElement(); // label 닫기
    //         //
    //         //     builder.OpenElement(4, "input");
    //         //     builder.AddAttribute(5, "type", "text");
    //         //     builder.AddAttribute(6, "value", this.ViewModel.SearchModel.Email);
    //         //     builder.AddAttribute(7, "oninput", EventCallback.Factory.Create<ChangeEventArgs>(this, e => this.ViewModel.SearchModel.Email = e.Value?.ToString()));
    //         //     builder.CloseElement(); // input 닫기
    //         //
    //         //     builder.OpenElement(7, "br");
    //         //     builder.CloseElement(); // br 닫기
    //         //
    //         //     builder.OpenElement(8, "label");
    //         //     builder.AddContent(9, "Name: ");
    //         //     builder.CloseElement(); // label 닫기
    //         //
    //         //     builder.OpenElement(10, "input");
    //         //     builder.AddAttribute(11, "type", "text");
    //         //     builder.CloseElement(); // input 닫기
    //         //
    //         //     builder.OpenElement(12, "br");
    //         //     builder.CloseElement(); // br 닫기
    //         //
    //         //     builder.OpenElement(13, "button");
    //         //     builder.AddAttribute(14, "onclick", EventCallback.Factory.Create(this, () => this.ViewModel.ReloadServerData()));
    //         //     builder.AddContent(15, "Search");
    //         //     builder.CloseElement(); // button 닫기
    //         //
    //         //     builder.CloseElement(); // div 닫기
    //         // };
    //     }
    // }
}