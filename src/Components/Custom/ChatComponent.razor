@using BlazorSecretManager.Components.Dialogs
@using BlazorSecretManager.Entities
@using BlazorSecretManager.Hubs
@using BlazorSecretManager.Hubs.Dtos
@using BlazorSecretManager.Infrastructure
@using BlazorSecretManager.Services.Messages
@using BlazorTrivialJs
@using eXtensionSharp
@using Microsoft.AspNetCore.SignalR.Client
@implements IAsyncDisposable

<MudGrid>
    <MudItem xs="3" sm="3">
        <MudStack>
            <MudStack Row="true">
                <MudText Typo="Typo.h6" Style="align-self: center;">CHAT</MudText>
                <MudIconButton Icon="@Icons.Material.Filled.PersonSearch" OnClick="ShowUserSearchDialog"/>            
            </MudStack>
            <MudList T="ChatRoom" SelectedValue="_selectedChatRoom" SelectedValueChanged="OnSelectedChatRoom" Dense="true">
                @foreach (var item in _chatRooms)
                {
                    <MudListItem Value="item">@item.Name</MudListItem>
                }
            </MudList>
        </MudStack>
    </MudItem>
    <MudItem xs="9" sm="9">
        <MudPaper Elevation="1">
            <div id="chat-container" style="height: 450px; overflow-y: scroll;">
                <div id="scroll-top" style="height:1px;"></div>
                @foreach (var item in _chatMessages.xToList())
                {
                    <MudChat ChatPosition=item.Position Color=item.Color>
                        @if (item.Position == ChatBubblePosition.Start)
                        {
                            <MudChatHeader Name="@item.Name" Time="@item.ReceivedDate"/>
                        }
                        else
                        {
                            <MudChatHeader Time="@item.ReceivedDate"/>
                        }
                        <MudChatBubble>
                            <pre>@item.Message</pre>
                        </MudChatBubble>
                    </MudChat>
                }
            </div>
        </MudPaper>
        <br/>
        <MudStack Row="true">
                <textarea id="chatTextArea" @ref="textAreaRef" @bind="@_chatMessage" @bind:event="oninput" @onkeyup="HandleKeyUp" class="chat-input"
                          placeholder="input chat message"
                          rows="4" style="width:100%;"></textarea>
            <MudIconButton Icon="@Icons.Material.Filled.Send" Color="Color.Info" Variant="Variant.Filled" OnClick="SendMessage"/>
        </MudStack>
    </MudItem>
</MudGrid>

@inject NavigationManager NavManager;
@inject ITrivialJs TrivialJs;
@inject IJSRuntime JsRuntime;
@inject IChatService ChatService;
@inject IDialogService DialogService;

@code {
    [Parameter] public UserSession UserSession { get; set; }
    
    private List<ChatRoom> _chatRooms = new();
    private ChatRoom _selectedChatRoom = new();

    private List<ChatMessage> _chatMessages { get; set; } = new();
    private HubConnection _hubConnection;
    
    private string _chatMessage;
    
    private int _pageNo = 0;
    private int _pageSize = 10;
    private bool _isBottom = false;
    
    bool _isReceivedMessage = false;
    private ElementReference textAreaRef;
    private DotNetObjectReference<ChatComponent> dotNetRef;
    
    protected override async Task OnInitializedAsync()
    {
        var baseUrl = NavManager.BaseUri;
        var hubUrl = baseUrl.TrimEnd('/') + ChatHub.HubUrl;
        
        _hubConnection = new HubConnectionBuilder()
            .WithUrl(hubUrl)
            .WithAutomaticReconnect()
            .Build();

        _hubConnection.On<int, string, string, string, DateTime>("ReceiveMessage", ReceiveMessage);
        _hubConnection.On<int, string, string, string>("ReceiveCreateRoom", ReceiveCreateRoom);
        _hubConnection.Reconnected += HubConnectionOnReconnected;
        _hubConnection.Reconnecting += HubConnectionOnReconnecting;

        await _hubConnection.StartAsync();
    }

    Task HubConnectionOnReconnecting(Exception arg)
    {
        Console.WriteLine("HubConnectionOnReconnecting");
        Console.WriteLine(arg.Message);
        return Task.CompletedTask;
    }    

    Task HubConnectionOnReconnected(string arg)
    {
        Console.WriteLine("HubConnectionOnReconnected");
        Console.WriteLine(arg);
        return Task.CompletedTask;
    }
    
    async Task ReceiveMessage(int roomId, string fromUserId, string fromUserName, string message, DateTime dt)
    {
        if (_selectedChatRoom.Id == roomId)
        {
            if (fromUserId == UserSession.UserId)
            {
                _chatMessages.Add(new ChatMessage()
                {
                    Name = string.Empty,
                    Position = UserSession.UserId == fromUserId ? ChatBubblePosition.End : ChatBubblePosition.Start,
                    Color = UserSession.UserId == fromUserId ? Color.Secondary : Color.Primary,
                    Message = message,
                    ReceivedDate = $"{dt.ToLongDateString()} {dt.ToLongTimeString()}"
                });
            }
            else
            {
                _chatMessages.Add(new ChatMessage()
                {
                    Name = fromUserName,
                    Position = UserSession.UserId == fromUserId ? ChatBubblePosition.End : ChatBubblePosition.Start,
                    Color = UserSession.UserId == fromUserId ? Color.Secondary : Color.Primary,
                    Message = message,
                    ReceivedDate = $"{dt.ToLongDateString()} {dt.ToLongTimeString()}"
                });
            }            
        }

        _isReceivedMessage = true;
        await InvokeAsync(StateHasChanged);
    }

    async Task ReceiveCreateRoom(int roomId, string ownerId, string roomName, string attendUsers)
    {
        var split = attendUsers.xSplit(",");
        if (split.Contains(UserSession.UserId))
        {
            var newRoom = new ChatRoom()
            {
                Id = roomId,
                OwnerId = ownerId,
                Name = roomName,
                AttendUsers = attendUsers,
                CreatedAt = DateTime.Now
            };
            _chatRooms.Add(newRoom);
        }

        await InvokeAsync(StateHasChanged);
    }    
    
    [JSInvokable]
    public async Task OnScrollTopReached()
    {
        var temp = _pageNo + 1;
        var chats = await LoadMessages(_selectedChatRoom.Id, temp, _pageSize);
        if (chats.xIsNotEmpty())
        {
            RenderMessage(chats);
            _pageNo++;
            await JsRuntime.InvokeVoidAsync("scrollDownBy", 6);
            await Task.Delay(500);
            await InvokeAsync(StateHasChanged);
        }
    }
    
    [JSInvokable]
    public async Task OnEnterPressed()
    {
        await SendMessage();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            dotNetRef = DotNetObjectReference.Create(this);
            await JsRuntime.InvokeVoidAsync("preventEnterDefault", dotNetRef, textAreaRef);
            _chatRooms =  (await ChatService.GetRooms(this.UserSession.UserId)).ToList();
            
            await JsRuntime.InvokeVoidAsync("initializeDraggablePopup", "popup");
            await JsRuntime.InvokeVoidAsync("initializeResizablePopup", "popup");
            await JsRuntime.InvokeVoidAsync("observeScrollTop", dotNetRef);
        }

        if (_isBottom)
        {
            await TrivialJs.ScrollToBottom("chat-container");
            _isBottom = false;
        }
        
        if (_isReceivedMessage)
        {
            await TrivialJs.ScrollToBottom("chat-container");
            _isReceivedMessage = false;
        }
    }

    private async Task HandleKeyUp(KeyboardEventArgs e)
    {
        if (e.Key == "Enter" && e.ShiftKey)
        {
            // Shift + Enter → 줄바꿈 유지
            
        }
        else if(e.Key == "Enter" && !e.ShiftKey)
        {
            if(_chatMessage.xIsEmpty()) return;
            await SendMessage();
            _chatMessage = string.Empty;
        }
    }
    
    async Task SendMessage()
    {
        await _hubConnection.SendAsync("SendMessage", _selectedChatRoom.Id, UserSession.UserId, _chatMessage);
    }
    
    void RenderMessage(List<Chat> chats)
    {
        foreach (var chat in chats)
        {
            if (chat.FromUserId == UserSession.UserId)
            {
                _chatMessages.Insert(0, new ChatMessage()
                {
                    Name = string.Empty,
                    Position = UserSession.UserId == chat.FromUserId ? ChatBubblePosition.End : ChatBubblePosition.Start,
                    Color = UserSession.UserId == chat.FromUserId ? Color.Secondary : Color.Primary,
                    Message = chat.Message,
                    ReceivedDate = $"{chat.CreatedAt.ToLongDateString()} {chat.CreatedAt.ToLongTimeString()}"
                });
            }     
            else
            {
                _chatMessages.Insert(0, new ChatMessage()
                {
                    Name = chat.FromUserName,
                    Position = UserSession.UserId == chat.FromUserId ? ChatBubblePosition.End : ChatBubblePosition.Start,
                    Color = UserSession.UserId == chat.FromUserId ? Color.Secondary : Color.Primary,
                    Message = chat.Message,
                    ReceivedDate = $"{chat.CreatedAt.ToLongDateString()} {chat.CreatedAt.ToLongTimeString()}"
                });
            }
        }
        StateHasChanged();
        
    }

    async Task<List<Chat>> LoadMessages(int roomId, int pageNo, int pageSize)
    {
        var chats = await this.ChatService.GetChats(roomId, pageNo, pageSize);
        return chats.Item2.ToList();
    }

    async Task OnSelectedChatRoom(ChatRoom room)
    {
        _selectedChatRoom = room;
        _pageNo = 1;
        _chatMessages.Clear();
        var chats = await LoadMessages(_selectedChatRoom.Id, _pageNo, _pageSize);
        _isBottom = true;
        RenderMessage(chats);
    }

    private async Task ShowUserSearchDialog(MouseEventArgs obj)
    {
        var parameters = new DialogParameters()
        {
            {nameof(UserSession), UserSession},
        };
        var options = new DialogOptions()
        {
            FullWidth = true,
            MaxWidth = MaxWidth.Medium
        };
        var dlg = await DialogService.ShowAsync<ChatUserSearchDialog>(string.Empty, parameters, options);
        var result = await dlg.Result;
        if (!result.Canceled)
        {
            var roomModel = result.Data.xAs<ChatUserSearchDialog.CreateRoomModel>();
            if(roomModel.RoomName.xIsEmpty()) return;
            if(roomModel.RoomUsers.xIsEmpty()) return;

            var roomUsers = roomModel.RoomUsers.ToList();
            var exists = roomUsers.FirstOrDefault(m => m.Id == UserSession.UserId);
            if (exists.xIsNotEmpty())
            {
                roomUsers.Remove(exists);    
            }

            var id = await this.ChatService.CreateRoom(this.UserSession.UserId, roomModel.RoomName, roomUsers.Select(m => m.Id).ToArray());
            _chatRooms.Add(new ChatRoom()
            {
                Id = id,
                Name = roomModel.RoomName,
                OwnerId = this.UserSession.UserId,
                AttendUsers = roomUsers.Select(m => m.Id).xJoin(","),
                CreatedAt = DateTime.Now,
            });
            await _hubConnection.SendAsync("CreateRoom", id, this.UserSession.UserId, roomModel.RoomName, roomModel.RoomUsers.Select(m => m.Id).xJoin(","));
        }
    }

    public async ValueTask DisposeAsync()
    {
        if (_hubConnection != null)
        {
            _hubConnection.Reconnected -= HubConnectionOnReconnected;
            _hubConnection.Reconnecting -= HubConnectionOnReconnecting;
            await _hubConnection.DisposeAsync();
        }
        Console.WriteLine("chat dispose");
    }
}